const fs = require('fs');
const path = require('path');

class NLSTransPlugin {
	constructor(fileName) {
		this.fileName = fileName || "extension.i18n.json";
	}
    apply(compiler) {
		compiler.hooks.emit.tap('NLSTransPlugin', (compilation) => {
		  let assets = compilation.assets || Object.create(null);
		  if(!compilation.assets["nls.metadata.json"]) {
		  	compilation.assets = assets;
		  	return;
		  }
		  let metadata = JSON.parse(compilation.assets["nls.metadata.json"].source());
		  let metadataJSON = Object.keys(metadata).reduce((pre, cur) => {
			pre[cur] = metadata[cur].keys;
			return pre;
		  }, {});
		  const rootPath = path.join(__dirname, "..", "..", "i18n");
		  let transDir = fs.readdirSync(rootPath);
		  transDir.forEach(local => {
			let curPath = `${rootPath}/${local}`;
			let isDir = fs.statSync(curPath);
			if(isDir.isDirectory()) {
				try {
					let transFiles = JSON.parse(fs.readFileSync(`${curPath}/${this.fileName}`));
					let content = JSON.parse(JSON.stringify(metadataJSON));
					Object.keys(content).forEach(fileName => {
						content[fileName].forEach((localKey, k) => {
							content[fileName][k] = transFiles[localKey];
						})
					})
					let rawContent = JSON.stringify(content);
					assets[`nls.bundle.${local}.json`] = {
						source() { return rawContent; },
                		size() { return rawContent.length; }
					}
				}catch(err) {
					throw new Error(err);
				}
			}
		  })
		  compilation.assets = assets;
		})
	};
}

module.exports = NLSTransPlugin
